default_platform(:ios)

platform :ios do
  desc "Builds the app without a provisioning profile"
  lane :build_cached do
    scheme = "Eventer"
    build_configuration = "Release"
    # !!! Path to the folder that you will cache on CI !!!
    ios_derived_data_path = File.expand_path("../.local_derived_data")
    cache_folder = File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/Pods.build/#{build_configuration}-iphonesimulator")
    pods_configuration_build_dir = File.expand_path("#{ios_derived_data_path}/Build/Products/#{build_configuration}-iphonesimulator")

    # set version number to number from env vars
    increment_version_number(
      version_number: "0.0.0"
    )

    # increment build number depending on current build number in testflight
    increment_build_number(
      build_number: 1,
      xcodeproj: "Eventer.xcodeproj"
    )

    # Code sign ...

    # Step 0) Check if cache exists 

    if(File.exist?(cache_folder) && File.exists?(pods_configuration_build_dir))
      # Step 1) Apply a fix of "Copy Pods Resources" Build Phase

      # Before:
      # "${PODS_ROOT}/Target Support Files/Pods-Eventer/Pods-Eventer-resources.sh"
      #
      # After:
      # BUILT_PRODUCTS_DIR=/a/b/c "${PODS_ROOT}/Target Support Files/Pods-Eventer/Pods-Eventer-resources.sh"

      fastlane_require 'xcodeproj'
      project = Xcodeproj::Project.open("../Eventer.xcodeproj")
      target = project.targets.select { |target| target.name == 'Eventer' }.first
      phase = target.shell_script_build_phases.select { |phase| phase.name && phase.name.include?('Copy Pods Resources') }.first
      if (!phase.shell_script.start_with?('BUILT_PRODUCTS_DIR'))
        phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_folder} #{phase.shell_script}"
        project.save()
      end

      # Step 2) Build only .xcodeproj 
      xcodebuild(
        project: 'Eventer.xcodeproj',
        scheme: scheme,
        configuration: build_configuration,
        derivedDataPath: ios_derived_data_path,
        sdk: "iphonesimulator",
        xcargs: [
            # Step 3) Provide paths where xcode can't find pods binaries
            "PODS_CONFIGURATION_BUILD_DIR=#{pods_configuration_build_dir}",
            "FRAMEWORK_SEARCH_PATHS='#{cache_folder} $(inherited)'",
            "LIBRARY_SEARCH_PATHS='#{cache_folder} $(inherited)'",
            "SWIFT_INCLUDE_PATHS=#{cache_folder}"
        ].join(" ")
      )
    else

      # Step 4) Build full app .xcworkspace
      xcodebuild(
        scheme: "Eventer",
        workspace: "Eventer.xcworkspace",
        derivedDataPath: ios_derived_data_path,
        configuration: build_configuration,
        sdk: "iphonesimulator"
      )


      # Step 5) Remove not a Pods binaries to reduce cache size
      require 'fileutils';
      dirs = [
        File.expand_path("#{ios_derived_data_path}/Logs"),
      ]
      dirs.each { |dir| FileUtils.rm_rf(dir) }
    end
  end

  lane :beta do 
    create_keychain(
      name: "#{ENV["KEYCHAIN_NAME"]}",
      password: "#{ENV["KEYCHAIN_PASS"]}",
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    app_store_connect_api_key(
      key_id: "#{ENV["PRIVATE_KEY_ID"]}",
      issuer_id: "#{ENV["PRIVATE_KEY_ISSUER"]}",
      key_content: "#{ENV["PRIVATE_KEY_CONTENT"]}",
      duration: 1200, # optional (maximum 1200)
      in_house: false # optional but may be required if using match/sigh
    )
    match(
      type: "appstore", 
      readonly: is_ci,
      keychain_name: "#{ENV["KEYCHAIN_NAME"]}",
      keychain_password: "#{ENV["KEYCHAIN_PASS"]}"
    )
    update_project_provisioning(
      xcodeproj: "Eventer.xcodeproj",
      profile: "#{ENV["sigh_dev.pesca.app.Eventer_appstore_profile-path"]}", # optional if you use sigh
      build_configuration: "Release",
      code_signing_identity: "iPhone Distribution"
    )
    update_code_signing_settings(
      path: "Eventer.xcodeproj",
      profile_name: "#{ENV["sigh_dev.pesca.app.Eventer_appstore_profile-name"]}",
      profile_uuid: "#{ENV["sigh_dev.pesca.app.Eventer_appstore"]}",
      team_id: "#{ENV["sigh_dev.pesca.app.Eventer_appstore_team-id"]}",
    )
    # set version number to number from env vars
    increment_version_number(
      version_number: ENV["VERSION_NUMBER"]
    )

    # increment build number depending on current build number in testflight
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "Eventer.xcodeproj"
    )

    # build and upload app
    build_app(scheme: "Eventer")
    upload_to_testflight
  end
end
